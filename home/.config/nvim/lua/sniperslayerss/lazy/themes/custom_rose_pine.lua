local palette = {
  _nc = "#1f1d30",
  base = "#232136",
  surface = "#2a273f",
  overlay = "#393552",
  muted = "#6e6a86",
  subtle = "#908caa",
  text = "#e0def4",
  love = "#eb6f92",
  gold = "#f6c177",
  rose = "#ea9a97",
  pine = "#3e8fb0",
  foam = "#9ccfd8",
  iris = "#c4a7e7",
  leaf = "#95b1ac",
  highlight_low = "#2a283e",
  highlight_med = "#44415a",
  highlight_high = "#56526e",
  none = "NONE",
}

local groups = {
  border = "muted",
  link = "iris",
  panel = "surface",

  error = "love",
  hint = "iris",
  info = "foam",
  ok = "leaf",
  warn = "gold",
  note = "pine",
  todo = "rose",

  git_add = "foam",
  git_change = "rose",
  git_delete = "love",
  git_dirty = "rose",
  git_ignore = "muted",
  git_merge = "iris",
  git_rename = "pine",
  git_stage = "iris",
  git_text = "rose",
  git_untracked = "subtle",

  h1 = "iris",
  h2 = "foam",
  h3 = "rose",
  h4 = "gold",
  h5 = "pine",
  h6 = "leaf",
}

local styles = {
  bold = false,
  italic = false,
  transparency = false,
}


return {
  "rose-pine/neovim",
  name = "rose-pine",
  config = function()
    require('rose-pine').setup({
      disable_background = false,
      dim_inactive_windows = false,
      styles = {
        italic = false,
      },

      highlight_groups = {
        ["@attribute.diff"] = { fg = palette.gold },
        ["@class"] = { fg = palette.foam },
        ["@conditional"] = { link = "Conditional" },
        ["@field"] = { fg = palette.text },
        ["@include"] = { link = "Include" },
        ["@interface"] = { fg = palette.foam },
        ["@macro"] = { link = "Macro" },
        ["@method"] = { fg = palette.rose },
        ["@namespace"] = { link = "Include" },
        ["@parameter"] = { fg = palette.text, italic = styles.italic },
        ["@preproc"] = { link = "PreProc" },
        ["@punctuation"] = { fg = palette.subtle },
        ["@regexp"] = { link = "String" },
        ["@repeat"] = { link = "Repeat" },
        ["@storageclass"] = { link = "StorageClass" },
        ["@symbol"] = { link = "Identifier" },
        ["@text"] = { fg = palette.text },
        ["@text.danger"] = { fg = groups.error },
        ["@text.diff.add"] = { fg = groups.git_add, bg = groups.git_add, blend = 20 },
        ["@text.diff.delete"] = { fg = groups.git_delete, bg = groups.git_delete, blend = 20 },
        ["@text.emphasis"] = { italic = styles.italic },
        ["@text.environment"] = { link = "Macro" },
        ["@text.environment.name"] = { link = "Type" },
        ["@text.math"] = { link = "Special" },
        ["@text.note"] = { link = "SpecialComment" },
        ["@text.strike"] = { strikethrough = true },
        ["@text.strong"] = { bold = styles.bold },
        ["@text.title"] = { link = "Title" },
        ["@text.title.1.markdown"] = { link = "markdownH1" },
        ["@text.title.1.marker.markdown"] = { link = "markdownH1Delimiter" },
        ["@text.title.2.markdown"] = { link = "markdownH2" },
        ["@text.title.2.marker.markdown"] = { link = "markdownH2Delimiter" },
        ["@text.title.3.markdown"] = { link = "markdownH3" },
        ["@text.title.3.marker.markdown"] = { link = "markdownH3Delimiter" },
        ["@text.title.4.markdown"] = { link = "markdownH4" },
        ["@text.title.4.marker.markdown"] = { link = "markdownH4Delimiter" },
        ["@text.title.5.markdown"] = { link = "markdownH5" },
        ["@text.title.5.marker.markdown"] = { link = "markdownH5Delimiter" },
        ["@text.title.6.markdown"] = { link = "markdownH6" },
        ["@text.title.6.marker.markdown"] = { link = "markdownH6Delimiter" },
        ["@text.underline"] = { underline = true },
        ["@text.uri"] = { fg = groups.link },
        ["@text.warning"] = { fg = groups.warn },
        ["@todo"] = { link = "Todo" },

        -- lukas-reineke/indent-blankline.nvim
        IndentBlanklineChar = { fg = palette.muted, nocombine = true },
        IndentBlanklineSpaceChar = { fg = palette.muted, nocombine = true },
        IndentBlanklineSpaceCharBlankline = { fg = palette.muted, nocombine = true },

        ColorColumn = { bg = palette.surface },
        Conceal = { bg = "NONE" },
        CurSearch = { fg = palette.base, bg = palette.gold },
        Cursor = { fg = palette.text, bg = palette.highlight_high },
        CursorColumn = { bg = palette.overlay },
        -- CursorIM = {},
        CursorLine = { bg = palette.overlay },
        CursorLineNr = { fg = palette.text, bold = styles.bold },
        -- DarkenedPanel = { },
        -- DarkenedStatusline = {},
        DiffAdd = { bg = groups.git_add, blend = 20 },
        DiffChange = { bg = groups.git_change, blend = 20 },
        DiffDelete = { bg = groups.git_delete, blend = 20 },
        DiffText = { bg = groups.git_text, blend = 40 },
        diffAdded = { link = "DiffAdd" },
        diffChanged = { link = "DiffChange" },
        diffRemoved = { link = "DiffDelete" },
        Directory = { fg = palette.foam, bold = styles.bold },
        -- EndOfBuffer = {},
        ErrorMsg = { fg = groups.error, bold = styles.bold },
        FloatTitle = { fg = palette.foam, bg = groups.panel, bold = styles.bold },
        FoldColumn = { fg = palette.muted },
        Folded = { fg = palette.text, bg = groups.panel },
        IncSearch = { link = "CurSearch" },
        LineNr = { fg = palette.muted },
        MatchParen = { fg = palette.pine, bg = palette.pine, blend = 25 },
        ModeMsg = { fg = palette.subtle },
        MoreMsg = { fg = palette.iris },
        NonText = { fg = palette.muted },
        Normal = { fg = palette.text, bg = palette.base },
        NormalFloat = { bg = groups.panel },
        NvimInternalError = { link = "ErrorMsg" },
        Pmenu = { fg = palette.subtle, bg = groups.panel },
        PmenuExtra = { fg = palette.muted, bg = groups.panel },
        PmenuExtraSel = { fg = palette.subtle, bg = palette.overlay },
        PmenuKind = { fg = palette.foam, bg = groups.panel },
        PmenuKindSel = { fg = palette.subtle, bg = palette.overlay },
        PmenuSbar = { bg = groups.panel },
        PmenuSel = { fg = palette.text, bg = palette.overlay },
        PmenuThumb = { bg = palette.muted },
        Question = { fg = palette.gold },
        -- QuickFixLink = {},
        -- RedrawDebugNormal = {},
        RedrawDebugClear = { fg = palette.base, bg = palette.gold },
        RedrawDebugComposed = { fg = palette.base, bg = palette.pine },
        RedrawDebugRecompose = { fg = palette.base, bg = palette.love },
        Search = { fg = palette.text, bg = palette.gold, blend = 20 },
        SignColumn = { fg = palette.text, bg = "NONE" },
        SpecialKey = { fg = palette.foam },
        SpellBad = { sp = palette.subtle, undercurl = true },
        SpellCap = { sp = palette.subtle, undercurl = true },
        SpellLocal = { sp = palette.subtle, undercurl = true },
        SpellRare = { sp = palette.subtle, undercurl = true },
        StatusLine = { fg = palette.subtle, bg = groups.panel },
        StatusLineNC = { fg = palette.muted, bg = groups.panel, blend = 60 },
        StatusLineTerm = { fg = palette.base, bg = palette.pine },
        StatusLineTermNC = { fg = palette.base, bg = palette.pine, blend = 60 },
        Substitute = { link = "IncSearch" },
        TabLine = { fg = palette.subtle, bg = groups.panel },
        TabLineFill = { bg = groups.panel },
        TabLineSel = { fg = palette.text, bg = palette.overlay, bold = styles.bold },
        Title = { fg = palette.foam, bold = styles.bold },
        VertSplit = { fg = groups.border },
        Visual = { bg = palette.iris, blend = 15 },
        -- VisualNOS = {},
        WarningMsg = { fg = groups.warn, bold = styles.bold },
        -- Whitespace = {},
        WildMenu = { link = "IncSearch" },
        WinBar = { fg = palette.subtle, bg = groups.panel },
        WinBarNC = { fg = palette.muted, bg = groups.panel, blend = 60 },
        WinSeparator = { fg = groups.border },

        DiagnosticError = { fg = groups.error },
        DiagnosticHint = { fg = groups.hint },
        DiagnosticInfo = { fg = groups.info },
        DiagnosticOk = { fg = groups.ok },
        DiagnosticWarn = { fg = groups.warn },
        DiagnosticDefaultError = { link = "DiagnosticError" },
        DiagnosticDefaultHint = { link = "DiagnosticHint" },
        DiagnosticDefaultInfo = { link = "DiagnosticInfo" },
        DiagnosticDefaultOk = { link = "DiagnosticOk" },
        DiagnosticDefaultWarn = { link = "DiagnosticWarn" },
        DiagnosticFloatingError = { link = "DiagnosticError" },
        DiagnosticFloatingHint = { link = "DiagnosticHint" },
        DiagnosticFloatingInfo = { link = "DiagnosticInfo" },
        DiagnosticFloatingOk = { link = "DiagnosticOk" },
        DiagnosticFloatingWarn = { link = "DiagnosticWarn" },
        DiagnosticSignError = { link = "DiagnosticError" },
        DiagnosticSignHint = { link = "DiagnosticHint" },
        DiagnosticSignInfo = { link = "DiagnosticInfo" },
        DiagnosticSignOk = { link = "DiagnosticOk" },
        DiagnosticSignWarn = { link = "DiagnosticWarn" },
        DiagnosticUnderlineError = { sp = groups.error, undercurl = true },
        DiagnosticUnderlineHint = { sp = groups.hint, undercurl = true },
        DiagnosticUnderlineInfo = { sp = groups.info, undercurl = true },
        DiagnosticUnderlineOk = { sp = groups.ok, undercurl = true },
        DiagnosticUnderlineWarn = { sp = groups.warn, undercurl = true },
        DiagnosticVirtualTextError = { fg = groups.error, bg = groups.error, blend = 10 },
        DiagnosticVirtualTextHint = { fg = groups.hint, bg = groups.hint, blend = 10 },
        DiagnosticVirtualTextInfo = { fg = groups.info, bg = groups.info, blend = 10 },
        DiagnosticVirtualTextOk = { fg = groups.ok, bg = groups.ok, blend = 10 },
        DiagnosticVirtualTextWarn = { fg = groups.warn, bg = groups.warn, blend = 10 },

        Boolean = { fg = palette.foam },
        Character = { fg = palette.gold },
        Comment = { fg = palette.subtle, italic = styles.italic },
        Conditional = { fg = palette.pine },
        Constant = { fg = palette.gold },
        Debug = { fg = palette.rose },
        Define = { fg = palette.text },
        Delimiter = { fg = palette.subtle },
        Error = { fg = palette.love },
        Exception = { fg = palette.pine },
        Float = { fg = palette.gold },
        Function = { fg = palette.rose },
        Identifier = { fg = palette.text },
        Include = { fg = palette.pine },
        Keyword = { fg = palette.pine },
        Label = { fg = palette.foam },
        LspCodeLens = { fg = palette.subtle },
        LspCodeLensSeparator = { fg = palette.muted },
        LspInlayHint = { fg = palette.muted, bg = palette.muted, blend = 10 },
        LspReferenceRead = { bg = palette.highlight_med },
        LspReferenceText = { bg = palette.highlight_med },
        LspReferenceWrite = { bg = palette.highlight_med },
        Macro = { fg = palette.text },
        Number = { fg = palette.gold },
        Operator = { fg = palette.subtle },
        PreCondit = { fg = palette.text },
        PreProc = { link = "PreCondit" },
        Repeat = { fg = palette.pine },
        Special = { fg = palette.foam },
        SpecialChar = { link = "Special" },
        SpecialComment = { fg = palette.iris },
        Statement = { fg = palette.pine, bold = styles.bold },
        StorageClass = { fg = palette.foam },
        String = { fg = palette.gold },
        Structure = { fg = palette.foam },
        Tag = { fg = palette.foam },
        Todo = { fg = palette.rose, bg = palette.rose, blend = 20 },
        Type = { fg = palette.foam },
        TypeDef = { link = "Type" },
        Underlined = { fg = palette.iris, underline = true },

        healthError = { fg = groups.error },
        healthSuccess = { fg = groups.info },
        healthWarning = { fg = groups.warn },

        htmlArg = { fg = palette.iris },
        htmlBold = { bold = styles.bold },
        htmlEndTag = { fg = palette.subtle },
        htmlH1 = { link = "markdownH1" },
        htmlH2 = { link = "markdownH2" },
        htmlH3 = { link = "markdownH3" },
        htmlH4 = { link = "markdownH4" },
        htmlH5 = { link = "markdownH5" },
        htmlItalic = { italic = styles.italic },
        htmlLink = { link = "markdownUrl" },
        htmlTag = { fg = palette.subtle },
        htmlTagN = { fg = palette.text },
        htmlTagName = { fg = palette.foam },

        markdownDelimiter = { fg = palette.subtle },
        markdownH1 = { fg = groups.h1, bold = styles.bold },
        markdownH1Delimiter = { link = "markdownH1" },
        markdownH2 = { fg = groups.h2, bold = styles.bold },
        markdownH2Delimiter = { link = "markdownH2" },
        markdownH3 = { fg = groups.h3, bold = styles.bold },
        markdownH3Delimiter = { link = "markdownH3" },
        markdownH4 = { fg = groups.h4, bold = styles.bold },
        markdownH4Delimiter = { link = "markdownH4" },
        markdownH5 = { fg = groups.h5, bold = styles.bold },
        markdownH5Delimiter = { link = "markdownH5" },
        markdownH6 = { fg = groups.h6, bold = styles.bold },
        markdownH6Delimiter = { link = "markdownH6" },
        markdownLinkText = { link = "markdownUrl" },
        markdownUrl = { fg = groups.link, sp = groups.link, underline = true },

        mkdCode = { fg = palette.foam, italic = styles.italic },
        mkdCodeDelimiter = { fg = palette.rose },
        mkdCodeEnd = { fg = palette.foam },
        mkdCodeStart = { fg = palette.foam },
        mkdFootnotes = { fg = palette.foam },
        mkdID = { fg = palette.foam, underline = true },
        mkdInlineURL = { link = "markdownUrl" },
        mkdLink = { link = "markdownUrl" },
        mkdLinkDef = { link = "markdownUrl" },
        mkdListItemLine = { fg = palette.text },
        mkdRule = { fg = palette.subtle },
        mkdURL = { link = "markdownUrl" },


        ["@variable"] = { fg = palette.text, italic = styles.italic },
        ["@variable.builtin"] = { fg = palette.love, italic = styles.italic, bold = styles.bold },
        ["@variable.parameter"] = { fg = palette.iris, italic = styles.italic },
        ["@variable.parameter.c"] = { fg = palette.text, italic = styles.italic },
        ["@variable.parameter.builtin"] = { fg = palette.text, italic = styles.italic, bold = styles.bold },
        ["@variable.member"] = { fg = palette.text },

        ["@constant"] = { fg = palette.pine},
        ["@constant.builtin"] = { fg = palette.pine, bold = styles.bold },
        ["@constant.macro"] = { fg = palette.pine},
        ["@constant.macro.c"] = { fg = palette.text},
        ["@constant.c"] = { fg = palette.text},
        -- ["@constant.macro.c"] = { fg = palette.iris},

        ["@module"] = { fg = palette.text },
        ["@module.c"] = { fg = palette.pine },
        ["@module.cpp"] = { fg = palette.pine },
        ["@module.builtin"] = { fg = palette.text, bold = styles.bold },
        ["@label"] = { link = "Label" },

        ["@string"] = { link = "String" },
        -- ["@string.documentation"] = {},
        ["@string.regexp"] = { fg = palette.text },
        ["@string.escape"] = { fg = palette.pine },
        ["@string.special"] = { link = "String" },
        ["@string.special.symbol"] = { link = "Identifier" },
        ["@string.special.url"] = { fg = groups.link },
        -- ["@string.special.path"] = {},

        ["@character"] = { link = "Character" },
        ["@character.special"] = { link = "Character" },

        ["@boolean"] = { link = "Boolean" },
        ["@number"] = { link = "Number" },
        ["@number.float"] = { link = "Number" },
        ["@float"] = { link = "Number" },

        ["@type"] = { fg = palette.foam },
        ["@type.builtin"] = { fg = palette.foam, bold = styles.bold },
        -- ["@type.definition"] = {},

        ["@attribute"] = { fg = palette.text },
        ["@attribute.builtin"] = { fg = palette.text, bold = styles.bold },
        ["@attribute.python"] = { fg = palette.subtle },
        ["@attribute.builtin.python"] = { fg = palette.subtle, bold = styles.bold },
        ["@property"] = { fg = palette.text, italic = styles.italic },

        ["@function"] = { fg = palette.rose },
        ["@function.builtin"] = { fg = palette.rose, bold = styles.bold },
        ["@function.call"] = { fg = palette.rose },
        ["@function.macro"] = { link = "Function" },

        ["@function.method"] = { fg = palette.rose },
        ["@function.method.call"] = { fg = palette.rose },

        ["@constructor"] = { fg = palette.foam },
        ["@operator"] = { link = "Operator" },

        ["@keyword"] = { link = "Keyword" },
        -- ["@keyword.coroutine"] = {},
        -- ["@keyword.function"] = {},
        ["@keyword.operator"] = { fg = palette.subtle },
        ["@keyword.import"] = { fg = palette.pine },
        ["@keyword.storage"] = { fg = palette.foam },
        ["@keyword.repeat"] = { fg = palette.pine },
        ["@keyword.return"] = { fg = palette.pine },
        ["@keyword.debug"] = { fg = palette.rose },
        ["@keyword.exception"] = { fg = palette.pine },

        ["@keyword.conditional"] = { fg = palette.pine },
        ["@keyword.conditional.ternary"] = { fg = palette.pine },

        ["@keyword.directive"] = { fg = palette.pine },
        ["@keyword.directive.define"] = { fg = palette.pine },

        --- Punctuation
        ["@punctuation.delimiter"] = { fg = palette.subtle },
        ["@punctuation.bracket"] = { fg = palette.subtle },
        ["@punctuation.special"] = { fg = palette.subtle },

        --- Comments
        ["@comment"] = { link = "Comment" },
        -- ["@comment.documentation"] = {},

        ["@comment.error"] = { fg = groups.error },
        ["@comment.warning"] = { fg = groups.warn },
        ["@comment.todo"] = { fg = groups.todo, bg = groups.todo, blend = 15 },
        ["@comment.hint"] = { fg = groups.hint, bg = groups.hint, blend = 15 },
        ["@comment.info"] = { fg = groups.info, bg = groups.info, blend = 15 },
        ["@comment.note"] = { fg = groups.note, bg = groups.note, blend = 15 },

        --- Markup
        ["@markup.strong"] = { bold = styles.bold },
        ["@markup.italic"] = { italic = styles.italic },
        ["@markup.strikethrough"] = { strikethrough = true },
        ["@markup.underline"] = { underline = true },

        ["@markup.heading"] = { fg = palette.foam, bold = styles.bold },

        ["@markup.quote"] = { fg = palette.text },
        ["@markup.math"] = { link = "Special" },
        ["@markup.environment"] = { link = "Macro" },
        ["@markup.environment.name"] = { link = "@type" },

        -- ["@markup.link"] = {},
        ["@markup.link.markdown_inline"] = { fg = palette.subtle },
        ["@markup.link.label.markdown_inline"] = { fg = palette.foam },
        ["@markup.link.url"] = { fg = groups.link },

        -- ["@markup.raw"] = { bg = palette.surface },
        -- ["@markup.raw.block"] = { bg = palette.surface },
        ["@markup.raw.delimiter.markdown"] = { fg = palette.subtle },

        ["@markup.list"] = { fg = palette.pine },
        ["@markup.list.checked"] = { fg = palette.foam, bg = palette.foam, blend = 10 },
        ["@markup.list.unchecked"] = { fg = palette.text },

        -- Markdown headings
        ["@markup.heading.1.markdown"] = { link = "markdownH1" },
        ["@markup.heading.2.markdown"] = { link = "markdownH2" },
        ["@markup.heading.3.markdown"] = { link = "markdownH3" },
        ["@markup.heading.4.markdown"] = { link = "markdownH4" },
        ["@markup.heading.5.markdown"] = { link = "markdownH5" },
        ["@markup.heading.6.markdown"] = { link = "markdownH6" },
        ["@markup.heading.1.marker.markdown"] = { link = "markdownH1Delimiter" },
        ["@markup.heading.2.marker.markdown"] = { link = "markdownH2Delimiter" },
        ["@markup.heading.3.marker.markdown"] = { link = "markdownH3Delimiter" },
        ["@markup.heading.4.marker.markdown"] = { link = "markdownH4Delimiter" },
        ["@markup.heading.5.marker.markdown"] = { link = "markdownH5Delimiter" },
        ["@markup.heading.6.marker.markdown"] = { link = "markdownH6Delimiter" },

        ["@diff.plus"] = { fg = groups.git_add, bg = groups.git_add, blend = 20 },
        ["@diff.minus"] = { fg = groups.git_delete, bg = groups.git_delete, blend = 20 },
        ["@diff.delta"] = { bg = groups.git_change, blend = 20 },

        ["@tag"] = { link = "Tag" },
        ["@tag.attribute"] = { fg = palette.text },
        ["@tag.delimiter"] = { fg = palette.subtle },

        --- Non-highlighting captures
        -- ["@none"] = {},
        ["@conceal"] = { link = "Conceal" },
        ["@conceal.markdown"] = { fg = palette.subtle },

        -- ["@spell"] = {},
        -- ["@nospell"] = {},

        --- Semantic
        ["@lsp.type.comment"] = {},
        ["@lsp.type.comment.c"] = { link = "@comment" },
        ["@lsp.type.comment.cpp"] = { link = "@comment" },
        ["@lsp.type.enum"] = { link = "@type" },
        ["@lsp.type.interface"] = { link = "@interface" },
        ["@lsp.type.keyword"] = { link = "@keyword" },
        ["@lsp.type.namespace"] = { link = "@namespace" },
        ["@lsp.type.namespace.python"] = { link = "@variable" },
        ["@lsp.type.parameter"] = { link = "@parameter" },
        ["@lsp.type.property"] = { link = "@property" },
        ["@lsp.type.variable"] = {},   -- defer to treesitter for regular variables
        ["@lsp.type.variable.svelte"] = { link = "@variable" },
        -- ["@lsp.type.macro.c"] = { link = "@constant.macro.c" },
        ["@lsp.typemod.function.defaultLibrary"] = { link = "@function.builtin" },
        ["@lsp.typemod.operator.injected"] = { link = "@operator" },
        ["@lsp.typemod.string.injected"] = { link = "@string" },
        ["@lsp.typemod.variable.constant"] = { link = "@constant" },
        ["@lsp.typemod.variable.defaultLibrary"] = { link = "@variable.builtin" },
        ["@lsp.typemod.variable.injected"] = { link = "@variable" },
      },
    })

    ---@deprecated Replaced by `options.highlight_groups["Normal"]`
    -- background = "base",
    ---@deprecated Replaced by `options.highlight_groups["Comment"]`
    -- comment = "subtle",
    ---@deprecated Replaced by `options.highlight_groups["@punctuation"]`
    -- punctuation = "muted",
    ---@deprecated Expects a table with values h1...h6
    -- headings = "text",

    vim.cmd.colorscheme("rose-pine")
    vim.api.nvim_set_hl(0, "NormalNC", { bg = "none" })
    vim.api.nvim_set_hl(0, "NormalFloat", { bg = "none" })
  end
}
